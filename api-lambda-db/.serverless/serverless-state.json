{
  "service": {
    "service": "node-vote-app",
    "serviceObject": {
      "name": "node-vote-app"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([^{}]+?)}",
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "eu-west-2",
      "environment": {
        "DYNAMODB_TABLE": "songs",
        "AUTH0_CLIENT_ID": "asndksahd82yhdjksc",
        "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDCzCCAfOgAwIBAgIJT9cmFfZ5pG3MMA0GCSqGSIb3DQEBCwUAMCMxITAfBgNV\r\nBAMTGHRoZXNhYXN0ZWNoLmV1LmF1dGgwLmNvbTAeFw0yMDEyMTAxMDA1MjRaFw0z\r\nNDA4MTkxMDA1MjRaMCMxITAfBgNVBAMTGHRoZXNhYXN0ZWNoLmV1LmF1dGgwLmNv\r\nbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALyr9qQtKVApdMgAJm6b\r\n58lhYu2gqsEPUOBsz3reshM75Z6LXns5XDlzU9umFKeF2DFVZ67KGRi9K88A3PBc\r\n8pcZOypNbZ7Jtq0uTlBVRkAccUPtYuL7dDTbWWzP49KR9KKQyQjHac+tcWscUTgo\r\nn0dsh+8GmqQf14BbLRfGdzWmOia2iqq5oNOV6XmmDrG07uCkRTRxrtaCjKbadCsi\r\nptFKXqjaA7WLC1NGIzok4Lgjqs9B/clU0YgD8Ngun/OKW1UjHDeVvTu+Cr2e0euH\r\na5B+8vcuPwBQZ5H9SBm7fbvCjPUK6RMhLKUqDTr2rE82lWd4OCeqEozeIZENtYGT\r\nIHcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUbR22gAfn233p\r\nMQvYM2EO3pSdsJYwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQAO\r\nCG+wqDoLmJJQ5RiqWrhXga3l5PC4OfBD7QzQ5MQT70EYKgiiub0Ir/0gKk2S4Q8S\r\n4v36ONVEd3n9MXtpCJTv5yQxsWazjxPJNzwbxEn+BJHHFp2KV0Nshw7APSjlmaq+\r\n2Yoju8xrGCxIsoAmEdDDcDQh/7OMDunnwkrObQGi3rq5HNh8RkzAm84cmeGcLkvS\r\nooUPYrknbWonwMRqe/Y47Zxr+9neuiNZr7WoRtndp5MleSZLGwK5cOOKtCY0pMC4\r\nS6puChWbpcc589waRXEAaxIuzPlKbyC1N264A3OoKdvvMV0F6QLJC+cgFQCFqFwn\r\nm5z7NjcE/jXfktb/5laP\r\n-----END CERTIFICATE-----"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "dynamodb:PutItem"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/songs"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AuthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/node-vote-app-dev-auth"
            }
          },
          "GetSongVoteCountsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/node-vote-app-dev-getSongVoteCounts"
            }
          },
          "RecordSongVoteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/node-vote-app-dev-recordSongVote"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "node-vote-app-dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/node-vote-app-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/node-vote-app-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "node-vote-app-dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-CH627CshDmgClVBThF"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "AuthLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetSongVoteCountsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "RecordSongVoteLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AuthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/node-vote-app/dev/1608019990369-2020-12-15T08:13:10.369Z/node-vote-app.zip"
              },
              "FunctionName": "node-vote-app-dev-auth",
              "Handler": "s_auth.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "songs",
                  "AUTH0_CLIENT_ID": "asndksahd82yhdjksc",
                  "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDCzCCAfOgAwIBAgIJT9cmFfZ5pG3MMA0GCSqGSIb3DQEBCwUAMCMxITAfBgNV\r\nBAMTGHRoZXNhYXN0ZWNoLmV1LmF1dGgwLmNvbTAeFw0yMDEyMTAxMDA1MjRaFw0z\r\nNDA4MTkxMDA1MjRaMCMxITAfBgNVBAMTGHRoZXNhYXN0ZWNoLmV1LmF1dGgwLmNv\r\nbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALyr9qQtKVApdMgAJm6b\r\n58lhYu2gqsEPUOBsz3reshM75Z6LXns5XDlzU9umFKeF2DFVZ67KGRi9K88A3PBc\r\n8pcZOypNbZ7Jtq0uTlBVRkAccUPtYuL7dDTbWWzP49KR9KKQyQjHac+tcWscUTgo\r\nn0dsh+8GmqQf14BbLRfGdzWmOia2iqq5oNOV6XmmDrG07uCkRTRxrtaCjKbadCsi\r\nptFKXqjaA7WLC1NGIzok4Lgjqs9B/clU0YgD8Ngun/OKW1UjHDeVvTu+Cr2e0euH\r\na5B+8vcuPwBQZ5H9SBm7fbvCjPUK6RMhLKUqDTr2rE82lWd4OCeqEozeIZENtYGT\r\nIHcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUbR22gAfn233p\r\nMQvYM2EO3pSdsJYwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQAO\r\nCG+wqDoLmJJQ5RiqWrhXga3l5PC4OfBD7QzQ5MQT70EYKgiiub0Ir/0gKk2S4Q8S\r\n4v36ONVEd3n9MXtpCJTv5yQxsWazjxPJNzwbxEn+BJHHFp2KV0Nshw7APSjlmaq+\r\n2Yoju8xrGCxIsoAmEdDDcDQh/7OMDunnwkrObQGi3rq5HNh8RkzAm84cmeGcLkvS\r\nooUPYrknbWonwMRqe/Y47Zxr+9neuiNZr7WoRtndp5MleSZLGwK5cOOKtCY0pMC4\r\nS6puChWbpcc589waRXEAaxIuzPlKbyC1N264A3OoKdvvMV0F6QLJC+cgFQCFqFwn\r\nm5z7NjcE/jXfktb/5laP\r\n-----END CERTIFICATE-----"
                }
              }
            },
            "DependsOn": [
              "AuthLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AuthLambdaVersionZVu4XjiSGbD9zqZjpKuE2AZBns1pEjwpvYjzx8HCo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthLambdaFunction"
              },
              "CodeSha256": "rcba+gL9dUj7ct5dtKmkknI6AeH06sqX5gRq0EVAeY8="
            }
          },
          "GetSongVoteCountsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/node-vote-app/dev/1608019990369-2020-12-15T08:13:10.369Z/node-vote-app.zip"
              },
              "FunctionName": "node-vote-app-dev-getSongVoteCounts",
              "Handler": "s_getSongVoteCounts.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "songs",
                  "AUTH0_CLIENT_ID": "asndksahd82yhdjksc",
                  "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDCzCCAfOgAwIBAgIJT9cmFfZ5pG3MMA0GCSqGSIb3DQEBCwUAMCMxITAfBgNV\r\nBAMTGHRoZXNhYXN0ZWNoLmV1LmF1dGgwLmNvbTAeFw0yMDEyMTAxMDA1MjRaFw0z\r\nNDA4MTkxMDA1MjRaMCMxITAfBgNVBAMTGHRoZXNhYXN0ZWNoLmV1LmF1dGgwLmNv\r\nbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALyr9qQtKVApdMgAJm6b\r\n58lhYu2gqsEPUOBsz3reshM75Z6LXns5XDlzU9umFKeF2DFVZ67KGRi9K88A3PBc\r\n8pcZOypNbZ7Jtq0uTlBVRkAccUPtYuL7dDTbWWzP49KR9KKQyQjHac+tcWscUTgo\r\nn0dsh+8GmqQf14BbLRfGdzWmOia2iqq5oNOV6XmmDrG07uCkRTRxrtaCjKbadCsi\r\nptFKXqjaA7WLC1NGIzok4Lgjqs9B/clU0YgD8Ngun/OKW1UjHDeVvTu+Cr2e0euH\r\na5B+8vcuPwBQZ5H9SBm7fbvCjPUK6RMhLKUqDTr2rE82lWd4OCeqEozeIZENtYGT\r\nIHcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUbR22gAfn233p\r\nMQvYM2EO3pSdsJYwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQAO\r\nCG+wqDoLmJJQ5RiqWrhXga3l5PC4OfBD7QzQ5MQT70EYKgiiub0Ir/0gKk2S4Q8S\r\n4v36ONVEd3n9MXtpCJTv5yQxsWazjxPJNzwbxEn+BJHHFp2KV0Nshw7APSjlmaq+\r\n2Yoju8xrGCxIsoAmEdDDcDQh/7OMDunnwkrObQGi3rq5HNh8RkzAm84cmeGcLkvS\r\nooUPYrknbWonwMRqe/Y47Zxr+9neuiNZr7WoRtndp5MleSZLGwK5cOOKtCY0pMC4\r\nS6puChWbpcc589waRXEAaxIuzPlKbyC1N264A3OoKdvvMV0F6QLJC+cgFQCFqFwn\r\nm5z7NjcE/jXfktb/5laP\r\n-----END CERTIFICATE-----"
                }
              }
            },
            "DependsOn": [
              "GetSongVoteCountsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetSongVoteCountsLambdaVersionZjQegBayvzT27PPmm0RHGyixqCDfPjqo9vkQhyuTLzg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSongVoteCountsLambdaFunction"
              },
              "CodeSha256": "rcba+gL9dUj7ct5dtKmkknI6AeH06sqX5gRq0EVAeY8="
            }
          },
          "RecordSongVoteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/node-vote-app/dev/1608019990369-2020-12-15T08:13:10.369Z/node-vote-app.zip"
              },
              "FunctionName": "node-vote-app-dev-recordSongVote",
              "Handler": "s_recordSongVote.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "songs",
                  "AUTH0_CLIENT_ID": "asndksahd82yhdjksc",
                  "AUTH0_CLIENT_PUBLIC_KEY": "-----BEGIN CERTIFICATE-----\r\nMIIDCzCCAfOgAwIBAgIJT9cmFfZ5pG3MMA0GCSqGSIb3DQEBCwUAMCMxITAfBgNV\r\nBAMTGHRoZXNhYXN0ZWNoLmV1LmF1dGgwLmNvbTAeFw0yMDEyMTAxMDA1MjRaFw0z\r\nNDA4MTkxMDA1MjRaMCMxITAfBgNVBAMTGHRoZXNhYXN0ZWNoLmV1LmF1dGgwLmNv\r\nbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALyr9qQtKVApdMgAJm6b\r\n58lhYu2gqsEPUOBsz3reshM75Z6LXns5XDlzU9umFKeF2DFVZ67KGRi9K88A3PBc\r\n8pcZOypNbZ7Jtq0uTlBVRkAccUPtYuL7dDTbWWzP49KR9KKQyQjHac+tcWscUTgo\r\nn0dsh+8GmqQf14BbLRfGdzWmOia2iqq5oNOV6XmmDrG07uCkRTRxrtaCjKbadCsi\r\nptFKXqjaA7WLC1NGIzok4Lgjqs9B/clU0YgD8Ngun/OKW1UjHDeVvTu+Cr2e0euH\r\na5B+8vcuPwBQZ5H9SBm7fbvCjPUK6RMhLKUqDTr2rE82lWd4OCeqEozeIZENtYGT\r\nIHcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUbR22gAfn233p\r\nMQvYM2EO3pSdsJYwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQAO\r\nCG+wqDoLmJJQ5RiqWrhXga3l5PC4OfBD7QzQ5MQT70EYKgiiub0Ir/0gKk2S4Q8S\r\n4v36ONVEd3n9MXtpCJTv5yQxsWazjxPJNzwbxEn+BJHHFp2KV0Nshw7APSjlmaq+\r\n2Yoju8xrGCxIsoAmEdDDcDQh/7OMDunnwkrObQGi3rq5HNh8RkzAm84cmeGcLkvS\r\nooUPYrknbWonwMRqe/Y47Zxr+9neuiNZr7WoRtndp5MleSZLGwK5cOOKtCY0pMC4\r\nS6puChWbpcc589waRXEAaxIuzPlKbyC1N264A3OoKdvvMV0F6QLJC+cgFQCFqFwn\r\nm5z7NjcE/jXfktb/5laP\r\n-----END CERTIFICATE-----"
                }
              }
            },
            "DependsOn": [
              "RecordSongVoteLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "RecordSongVoteLambdaVersionLxIgocwuhtBz9p7zl6M13rqScg8IPN2RsdMaUfpeplo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RecordSongVoteLambdaFunction"
              },
              "CodeSha256": "rcba+gL9dUj7ct5dtKmkknI6AeH06sqX5gRq0EVAeY8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-node-vote-app",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceVotes": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "votes",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSong": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "song",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSongVote": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSong"
              },
              "PathPart": "vote",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodVotesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceVotes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSongVoteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSongVote"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodVotesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceVotes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSongVoteCountsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodSongVotePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSongVote"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RecordSongVoteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthApiGatewayAuthorizer"
          },
          "AuthApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "IdentitySource": "method.request.header.Authorization",
              "Name": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1608019973497": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodVotesOptions",
              "ApiGatewayMethodSongVoteOptions",
              "ApiGatewayMethodVotesGet",
              "ApiGatewayMethodSongVotePost"
            ]
          },
          "GetSongVoteCountsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSongVoteCountsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RecordSongVoteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RecordSongVoteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/node-vote-app-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "node-vote-app",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/node-vote-app/dev/1608019990369-2020-12-15T08:13:10.369Z/custom-resources.zip"
              },
              "FunctionName": "node-vote-app-dev-custom-resource-apigw-cw-role",
              "Handler": "apiGatewayCloudWatchRole/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "songsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "songs",
              "AttributeDefinitions": [
                {
                  "AttributeName": "songName",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "songName",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "GatewayResponse": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "EXPIRED_TOKEN",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StatusCode": "401"
            }
          },
          "AuthFailureGatewayResponse": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "UNAUTHORIZED",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StatusCode": "401"
            }
          },
          "CloudWatchLogsSubscriptionFilterAuthLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-2:802587217904:destination:CH627CshDmgClVBThF#y0xX7pctfrZBv5sDB0#node-vote-app#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "AuthLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetSongVoteCountsLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-2:802587217904:destination:CH627CshDmgClVBThF#y0xX7pctfrZBv5sDB0#node-vote-app#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetSongVoteCountsLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterRecordSongVoteLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-2:802587217904:destination:CH627CshDmgClVBThF#y0xX7pctfrZBv5sDB0#node-vote-app#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "RecordSongVoteLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterApiGatewayLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-2:802587217904:destination:CH627CshDmgClVBThF#y0xX7pctfrZBv5sDB0#node-vote-app#dev",
              "FilterPattern": "\"SLS_ACCESS_LOG\"",
              "LogGroupName": {
                "Ref": "ApiGatewayLogGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            }
          },
          "AuthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthLambdaVersionZVu4XjiSGbD9zqZjpKuE2AZBns1pEjwpvYjzx8HCo"
            }
          },
          "GetSongVoteCountsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSongVoteCountsLambdaVersionZjQegBayvzT27PPmm0RHGyixqCDfPjqo9vkQhyuTLzg"
            }
          },
          "RecordSongVoteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RecordSongVoteLambdaVersionLxIgocwuhtBz9p7zl6M13rqScg8IPN2RsdMaUfpeplo"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        },
        "httpApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourcePath\":\"$context.routeKey\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"stage\":\"$context.stage\",\"status\":\"$context.status\",\"integrationStatus\":\"$context.integrationStatus\",\"integrationLatency\":\"$context.integrationLatency\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_HTTP_API_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "auth": {
        "handler": "s_auth.handler",
        "events": [],
        "name": "node-vote-app-dev-auth",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AuthLambdaVersionZVu4XjiSGbD9zqZjpKuE2AZBns1pEjwpvYjzx8HCo"
      },
      "getSongVoteCounts": {
        "handler": "s_getSongVoteCounts.handler",
        "events": [
          {
            "http": {
              "path": "votes",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "node-vote-app-dev-getSongVoteCounts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetSongVoteCountsLambdaVersionZjQegBayvzT27PPmm0RHGyixqCDfPjqo9vkQhyuTLzg"
      },
      "recordSongVote": {
        "handler": "s_recordSongVote.handler",
        "events": [
          {
            "http": {
              "path": "song/vote",
              "method": "post",
              "authorizer": {
                "name": "auth",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "node-vote-app-dev-recordSongVote",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "RecordSongVoteLambdaVersionLxIgocwuhtBz9p7zl6M13rqScg8IPN2RsdMaUfpeplo"
      }
    },
    "resources": {
      "Resources": {
        "songsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "songs",
            "AttributeDefinitions": [
              {
                "AttributeName": "songName",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "songName",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "GatewayResponse": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "EXPIRED_TOKEN",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StatusCode": "401"
          }
        },
        "AuthFailureGatewayResponse": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "UNAUTHORIZED",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StatusCode": "401"
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "app": "node-vote-app",
    "org": "amitmahajancloud",
    "layers": {},
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "appUid": "y0xX7pctfrZBv5sDB0",
    "orgUid": "CH627CshDmgClVBThF",
    "artifact": "/Users/amitmahajan/Workspace/Serverless/InfraAsACode-AWS/api-lambda-db/.serverless/node-vote-app.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/node-vote-app/dev/1608019990369-2020-12-15T08:13:10.369Z",
    "artifact": "node-vote-app.zip"
  }
}